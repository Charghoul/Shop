model Shop {

server Server {
	Service service;
}

abstract server Service {
}
server ServiceKunde extends Service {
	one-to-one EinkaufsManager einkaufsManager;
	ArtikelManager artikelManager;
	void neuePosition(EinkaufsManager einkaufsManager, Artikel artikel, Integer menge) throws UserException;
	void bestellen(EinkaufsManager einkaufsManager);
	void aendereMenge(Position position, Integer menge) throws ExcLagerbestandUnderZero;
}
server ServiceAdmin extends Service {
	Warenlager warenlager;
	ArtikelManager artikelManager;
	one-to-one (no-view myService) LieferartManager lieferartManager;
	one-to-one HerstellerManager herstellerManager;
	void neuerArtikel(ArtikelManager artikelManager, String artikelnummer, String bezeichnung, Fraction preis, Integer minLagerbestand, 		Integer maxLagerbestand, Integer hstLieferzeit);
	void produktgruppeHinzufuegen(Produktgruppe produktgruppe, String name)  throws ExcAlreadyExists, CycleException;
	void artikelHinzufuegen(Produktgruppe produktgruppe, Artikel artikel)  throws ExcAlreadyExists, CycleException;
	void statusVerkauf(Artikel artikel);
	void statusAuslauf(Artikel artikel);
	void neueLieferArt(LieferartManager lieferartManager, String name, Integer lieferzeit, Fraction preis) throws ExcAlreadyExists;
	void aendereLieferart(Lieferart lieferart, String name, Integer lieferzeit, Fraction preis) throws ExcAlreadyExists;
	void artikelEinlagern(Warenlager warenlager, Artikel artikel, Integer menge) throws ExcLagerbestandOverMax;
	void artikelEntnehmen(Warenlager warenlager, Position position, Integer menge);
	void aendereArtikel(Artikel artikel, String bezeichnung, Fraction preis, Integer minLagerbestand, Integer maxLagerbestand, Integer hstLieferzeit) throws ExcAlreadyExists;
}
server ServiceRegister extends Service {
	active void register(String username, String passwort) throws ExcUserAlreadyExists;
}
singleton ArtikelManager{
	Artikel ** artikelListe;
	Produktgruppe ** produktgruppen;
	void produktgruppeHinzufuegen(Produktgruppe produktgruppe, String name) throws ExcAlreadyExists;
	void artikelHinzufuegen(Artikel artikel);
	active void neuerArtikel(String artikelnummer, String bezeichnung, Fraction preis, Integer minLagerbestand, 		Integer maxLagerbestand, Integer hstLieferzeit) throws UserException;
	active void aendereArtikel(Artikel artikel, String bezeichnung, Fraction preis, Integer minLagerbestand, Integer maxLagerbestand, Integer hstLieferzeit) throws ExcAlreadyExists;
}
singleton Warenlager{
	Position ** warenListe;
	active void artikelEntnehmen##artEnt(Position position, Integer menge) throws ExcLagerbestandUnderZero;
	void artikelEinlagern(Artikel artikel, Integer menge) throws ExcLagerbestandOverMax;
}

class HerstellerManager{
	Hersteller ** herstellerListe;
	void neuerHersteller(String name) throws ExcAlreadyExists;
	void aendereHersteller(Hersteller hersteller, String name)throws ExcAlreadyExists;
}
class EinkaufsManager{
	Position ** einkaufsListe;
	void bestellen();
	void neuePosition(Artikel artikel, Integer menge) throws ExcArtikelAlreadyExists, UserException;
	void aendereMenge(Position position, Integer menge) throws ExcLagerbestandUnderZero;
}
class LieferartManager{
	Lieferart ** lieferartenListe;
	void neueLieferart(String name, Integer lieferzeit, Fraction preis) throws ExcAlreadyExists;
	void aendereLieferart(Lieferart lieferart, String name, Integer lieferzeit, Fraction preis) throws ExcAlreadyExists;
}

class Kunde{
	indexed prior String benutzername;
	prior String passwort;
	public Konto konto;
}

class Konto{
	Fraction kontostand;
	Fraction limit;
}
hierarchy Hierarchie;
abstract class Komponente {
}
class Artikel extends Komponente{
	prior indexed String artikelnummer;
	prior indexed String bezeichnung;
	prior Fraction preis;
	prior Integer minLagerbestand;
	prior Integer maxLagerbestand;
	prior Integer hstLieferzeit;
	prior Artikelstatus artikelstatus;
	void aendereArtikel(String bezeichnung, Fraction preis, Integer minLagerbestand, Integer maxLagerbestand, Integer hstLieferzeit) throws ExcAlreadyExists;
	active void statusVerkauf() throws ExcInconsistentStatusChange;
	active void statusAuslauf() throws ExcInconsistentStatusChange;
	BooleanX groesserMax(Integer menge);
	BooleanX alreadyExists(String bezeichung);
}
class Produktgruppe extends Komponente{
	Komponente**komponentenListe hierarchy Hierarchie;
	prior indexed String name;
	BooleanX alreadyExists(String name);
	void produktgruppeHinzufuegen(String name) throws ExcAlreadyExists, CycleException;
	void artikelHinzufuegen(Artikel artikel) throws ExcAlreadyExists, CycleException;
}
class Hersteller{
	prior indexed String name;
	void aendereHersteller(String name) throws ExcAlreadyExists;
	BooleanX alreadyExists(String name);
}
class Bestellung{
	Position ** positionsListe;
	prior indexed String bestellID;
	Bestellstatus bestellstatus;
}
class Lieferung{
	public Bestellung bestellung;
	 public Lieferart lieferart;
	Integer lieferversuche;
}
class Position{
	prior Artikel artikel;
	prior Integer menge;
	void verringereMenge(Integer menge) throws ExcLagerbestandUnderZero;
	void aendereMenge(Integer menge) throws ExcLagerbestandUnderZero;
	void erhoeheMenge(Integer menge) throws ExcLagerbestandOverMax;
	Position artikelVorhanden(Artikel artikel);
}

class Lieferart{
	indexed prior String name;
	prior Integer lieferzeit;
	prior Fraction preis;
	void aendereLieferart(String name, Integer lieferzeit, Fraction preis) throws ExcAlreadyExists;
	BooleanX alreadyExists(String name);
}

abstract class Artikelstatus{}
singleton Neuanlage extends Artikelstatus{}
singleton Verkauf extends Artikelstatus{}
singleton Auslauf extends Artikelstatus{}

abstract class Bestellstatus{}
class Vorbestellung extends Bestellstatus{}
class Hinversand extends Bestellstatus{}
class Geliefert extends Bestellstatus{}
class Angenommen extends Bestellstatus{}
class Rueckversand extends Bestellstatus{}


abstract class BooleanX{}
singleton TrueX extends BooleanX{}
singleton FalseX extends BooleanX{}

exception ExcInconsistentStatusChange{}
exception ExcAlreadyExists{}
exception ExcLagerbestandOverMax{}
exception ExcLagerbestandUnderZero{}
exception ExcLieferartAlreadyExists{}
exception ExcArtikelAlreadyExists{}
exception ExcUserAlreadyExists{}
exception ExcStatusDidNotChange{}

}

