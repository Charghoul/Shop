model Shop {

server Server {
	Service service;
}

abstract server Service {
}
abstract server ServiceShop extends Service{
	observe ProduktKatalog produktKatalog;
}
server ServiceKunde extends ServiceShop {
	SuchManager suchManager;
	observe no-view Warenlager warenlager;
	public one-to-one (no-view myServiceKunde) Konto konto;
	one-to-one (no-view myServiceKunde) EinkaufsManager einkaufsManager;
	no-view LieferartManager lieferartManager;
	observe BestellManager  bestellManager;
	void neuePosition(EinkaufsManager einkaufsManager, Artikel artikel {produktKatalog}, Integer menge) throws UserException;
	void vorbestellen(EinkaufsManager einkaufsManager checked, Lieferart lieferart {lieferartManager});
	void bestellen(EinkaufsManager einkaufsManager checked, Lieferart lieferart {lieferartManager});
	void aendereMenge(Position position, Integer menge) throws ExcLagerbestandUnderZero, ExcLagerbestandOverMax;
	void zuEinkaufswagenHinzufuegen(Artikel artikel, Integer menge);
	void zuruecksenden(PositionInBestellung position checked);
	void allesZuruecksenden(Bestellung bestellung checked);
	void annehmen(Bestellung bestellung checked);
	void entfernePosition(Position position);
	void einzahlen(Konto konto, Integer betrag);
	void auszahlen(Konto konto, Integer betrag) throws ExcAuszahlungGroesserGutgaben;
	void suchen(String bezeichnung);
}
server ServiceAdmin extends ServiceShop {
	observe KundenManager kundenManager;
	Warenlager warenlager;
	ArtikelManager artikelManager;
	LieferartManager lieferartManager;
	one-to-one HerstellerManager herstellerManager;
	observe ZeitManager zeitManager;
	no-view void aendereHstLieferzeit(Artikel artikel, Integer hstLieferzeit);
	no-view 	void aendereMinLagerbestand(Artikel artikel, Integer minLagerbestand);
	no-view 	void aendereMaxLagerbestand(Artikel artikel, Integer maxLagerbestand);
	no-view 	void aenderePreis(Artikel artikel, Integer preis);
	no-view 	void aendereBezeichnung(Artikel artikel, String bezeichnung);
	void neuerArtikel(ArtikelManager artikelManager, String artikelnummer, String bezeichnung, Integer preis, Integer minLagerbestand, 		Integer maxLagerbestand, Integer hstLieferzeit);
	void produktgruppeHinzufuegen(Produktgruppe produktgruppe, String name)  throws ExcAlreadyExists, CycleException;
	void produktgruppeEntfernen(Produktgruppe produktgruppe);
	void artikelAnhaengen( Produktgruppe produktgruppe, Artikel artikel {artikelManager})  throws ExcAlreadyExists, CycleException;
	void artikelAbhaengen(Produktgruppe produktgruppe, Artikel artikel);
	void statusVerkauf@@freigeben(Artikel artikel checked);
	void statusAuslauf@@einstellen(Artikel artikel checked);
	void neueLieferArt(LieferartManager lieferartManager, String name, Integer lieferzeit, Integer preis) throws ExcAlreadyExists;
	void artikelEinlagern(Warenlager warenlager, Artikel artikel {artikelManager}, Integer menge);
	void artikelEntnehmen(Warenlager warenlager, Artikel artikel {artikelManager}, Integer menge);
	void artikelEntfernen(Warenlager warenlager, Position position {warenlager});
	void verringereMenge(Position position, Integer menge) throws ExcLagerbestandUnderZero;
	void aendereMenge(Position position, Integer menge) throws ExcLagerbestandUnderZero, ExcLagerbestandOverMax;
	void erhoeheMenge(Position position, Integer menge) throws ExcLagerbestandOverMax;
	void neuerHersteller(HerstellerManager herstellerManager, String name) throws ExcAlreadyExists;
	void aendereHersteller(Hersteller hersteller, String name) throws ExcAlreadyExists;
	void herstellerHinzufuegen(Artikel artikel, Hersteller hersteller {herstellerManager});
	no-view void aendereAnnahmezeit(ZeitManager zeitManager,Integer neueZeit);
	no-view void aendereMaxAnlieferungsVersuche(ZeitManager zeitManager, Integer maxAnlieferungsVersuche);
	no-view void aendereRueckversandGebuehr(LieferartManager lieferartManager,Integer percent);
	no-view void aendereStandardGuthaben(KundenManager kundenManager, Integer guthaben);
	no-view void aendereStandardLimit(KundenManager kundenManager, Integer limit);
	no-view void aendereLieferartPreis(Lieferart lieferart, Integer preis);
	no-view void aendereLieferartName(Lieferart lieferart, String name) ;
	no-view void aendereLieferartDauer(Lieferart lieferart, Integer dauer);
	
}
//Der Registrierservice ist notwendig, damit sich neue Kunden registrieren können. Man erreicht ihn indem man "Public" als Name einträgt und kein Passwort. In dem sich dann öffnenden Service kann der Kunde sich ein Benutzernamen und Passwort aussuchen und sich dann damit anmelden.
server ServiceRegister extends Service {
	//meldet den Kunden mit Benutzername und Passwort am Shop an
	active void register(String username, String passwort) throws ExcUserAlreadyExists;
}

//Der SuchManager zeigt die Suchergebnisse des Kunden an
class SuchManager{
	Artikel ** suchListe;
	void leeren();
	active void anzeigen(String bezeichnung) throws ExcArtikelDoesNotExist;
}

//Der Artikelmanager verwaltet alle Artikel des Shops
singleton ArtikelManager{
	Artikel ** artikelListe;
	//Der Admin kann einen neuen Artikel mit einzigartiger Artikelnummer, Bezeichnung, Preis, minimalem und maximalem Lagerbestand und der Herstellerlieferzeit anlegen. 
	active void neuerArtikel(String artikelnummer, String bezeichnung, Integer preis, Integer minLagerbestand, 		Integer maxLagerbestand, Integer hstLieferzeit) throws UserException;
}

//Der Bestellmanager verwaltet die Bestellungen und Vorbestellungen des einzelnen Kunden. 
class BestellManager{
	public Bestellung ** bestellListe;
	public Vorbestellung ** vorbestellListe;
	server-only Integer bestellID;
	server-only prior	public Konto konto;
	//Eine neue Bestellung wird mit den dazugehörigen Positionen, dem aktuellen warenwert und der vom Kunden gewählten Lieferart erstellt. Dazu kommt eine hochlaufende bestellID. Falls ein Artikel nicht vorhanden ist wird dies als Exception geworfen. Auch wird eine neue KndLieferung im ZeitManager erstellt
	Bestellung neueBestellung(Position ** positionsListe, Integer warenwert, Lieferart lieferart) throws ExcArtikelNichtVerfuegbar;
	//Eine neue Vorbestellung wird mit den dazugehörigen Positionen, dem aktuellen warenwert und der vom Kunden gewählten Lieferart erstellt.
	Vorbestellung neueVorbestellung(Position ** positionsListe, Integer warenwert, Lieferart lieferart);
	//Interne Funktion um den BestellManager zu aktualisieren
	event void benachrichtige();
	//prüft, ob eine der Vorbestellungen bereit zum versenden ist, wenn ja wird eine Bestellung mit den gleichen eigenschaften erstellt und die Vorbestellung gelöscht
	void pruefeVorbestellungen();	
}

//Der Produktkatalog wird beim Kunden angezeigt und vom Administrator gepflegt. Er dient nur zur Einordnung der Artikel in verschiedene Produktgruppen, um dem Kunden eine bessere Übersicht zu biete.
singleton ProduktKatalog{
	public Produktgruppe produktgruppen;
	event void produktgruppeHinzufuegen(Produktgruppe produktgruppe, String name)  throws ExcAlreadyExists, CycleException;
	event active void produktgruppeEntfernen##prodEntf(Produktgruppe produktgruppe) throws ExcHasNoParent;
	event void artikelAnhaengen( Produktgruppe produktgruppe, Artikel artikel )  throws ExcAlreadyExists, CycleException;
	event void artikelAbhaengen(Produktgruppe produktgruppe, Artikel artikel);
	event void internalUpdate();
}

//Das Warenlager enthält alle Artikel mit den dazugehörigen aktuellen Beständen. 		
singleton Warenlager{
	public Position ** warenListe;
	active void artikelEntnehmen##artEntf(Artikel artikel, Integer menge) throws ExcLagerbestandUnderZero, ExcArtikelHatKeinenHersteller;
	event active void artikelEinlagern(Artikel artikel, Integer menge) throws ExcLagerbestandOverMax;
	active void artikelEntfernen##artEntn(Position position);
	Position nichtVerfPruefen(Position ** positionsListe);
	void nachbestellen(Artikel artikel, Integer menge) throws ExcArtikelHatKeinenHersteller;
}

singleton ZeitManager {
	observe ZeitObjekt ** zeitObjektListe;
	server-only ZeitObjekt ** annahmeZeiten;
	public Integer annahmezeit@@AnnahmezeitInZeitEinheiten;
	public Integer maxAnlieferungsVersuche##maxAnl;
	public Integer retoureZeit@@standardRetourenZeitInZE;
	void handleTimeUnitElapsed() ;
	event void neueHstLieferung(Artikel artikel, Integer menge);
	event void neueKndLieferung(Bestellung bestellung);
	event void neueKndAnnahme(KndLieferung kndLieferung);
	event void neueRetourePosition(PositionInBestellung position);
	event void neueRetoureLieferung(KndLieferung kndLieferung);
	event void forwardInternalEvent();
	void removeZeitObjekt(ZeitObjekt zeitObjekt);
	void aendereAnnahmezeit(Integer neueZeit);
	void aendereMaxAnlieferungsVersuche(Integer maxAnlieferungsVersuche);
	void aendereRetoureZeit(Integer retoureZeit);
}

abstract class ZeitObjekt{
	public prior Integer remainingTime;
	server-only public prior Status status;
	event void reduceTime();
	void handleTimeElapsed();
	event void zeitAbgelaufen();
}

class HerstellerManager{
	Hersteller ** herstellerListe;
	void neuerHersteller(String name) throws ExcAlreadyExists;
}
class EinkaufsManager{
	public Position ** einkaufsListe;
	prior no-view BestellManager bestellManager;
	active void bestellen(Lieferart lieferart) throws ExcArtikelNichtVerfuegbar, ExcWarenwertUeberKontoguthaben;
	active void vorbestellen(Lieferart lieferart) throws ExcWarenwertUeberKontoguthaben;
	void neuePosition(Artikel artikel, Integer menge) throws ExcArtikelAlreadyExists, ExcLagerbestandOverMax, ExcArtikelNochNichtVerfuegbar;
	void entfernePosition(Position position);
	Integer gibGesamtPreis();
}
singleton LieferartManager{
	public Lieferart ** lieferartenListe;
	public prior Integer rueckversandGebuehr##rckG@@RueckversandgebuehrenInProzent;
	
	void neueLieferart(String name, Integer lieferzeit, Integer preis) throws ExcAlreadyExists;
	void aendereRueckversandGebuehr(Integer percent);
}

singleton KundenManager{
	public Kunde**kundenListe;
	public Integer standardLimit;
	public Integer standardGuthaben;
	void aendereStandardGuthaben(Integer guthaben);
	void aendereStandardLimit(Integer limit);
}

class Kunde{
	indexed prior String benutzername;
	prior String passwort;
}

class Konto{
	public prior Integer kontostand;
	public-write prior Integer limit;
	public prior Integer reserviert;
	void abbuchen(Integer betrag);
	void einzahlen(Integer betrag);
	void auszahlen(Integer betrag) throws ExcAuszahlungGroesserGutgaben;
	void reserviere(Integer betrag);
	void verringereReserviert(Integer betrag);
	void aendereLimit(Integer limit);
}
hierarchy Hierarchie;
abstract class Komponente {
}
class Artikel extends Komponente{
	prior indexed String artikelnummer;
	prior indexed String bezeichnung;
	public prior Integer preis;
	public prior Integer minLagerbestand;
	public prior Integer maxLagerbestand;
	public prior Integer hstLieferzeit;
	public prior skip-view Artikelstatus artikelstatus;
	public no-view Hersteller hersteller;
	void aendereHstLieferzeit(Integer hstLieferzeit);
	void aendereMinLagerbestand(Integer minLagerbestand);
	void aendereMaxLagerbestand(Integer maxLagerbestand);
	void aenderePreis(Integer preis);
	void aendereBezeichnung(String bezeichnung);
	active void statusVerkauf() throws ExcInconsistentStatusChange, ExcArtikelHatKeinenHersteller;
	active void statusAuslauf() throws ExcInconsistentStatusChange;
	active void zuEinkaufswHinz(Integer menge, EinkaufsManager einkaufsManager) throws UserException;
	void herstellerHinzufuegen(Hersteller hersteller);
}
class Produktgruppe extends Komponente{
	symmetric Komponente**komponentenListe hierarchy Hierarchie;
	prior indexed String name;
	void produktgruppeHinzufuegen(String name) throws ExcAlreadyExists, CycleException;
	void prodGEntfernen() throws ExcHasNoParent;
	void removeChild(Produktgruppe child);
	void artikelAnhaengen(Artikel artikel) throws ExcAlreadyExists, CycleException;
	void artikelAbhaengen(Artikel artikel);
}
class Hersteller{
	prior indexed String name;
	void aendereHersteller(String name) throws ExcAlreadyExists;
}
abstract class BestellungAbstrakt##BstAbstr{
	public prior server-only BestellManager bestellManager;
	public prior Integer warenwert;
	public prior Lieferart lieferart;
	void listeHinzufuegen(Position ** positionsListe);
}

class Bestellung extends BestellungAbstrakt{
	public PositionInBestellung ** positionsListe;
	server-only public KndLieferung kndLieferung;
	prior indexed Integer bestellID;
	public no-view Bestellstatus bestellstatus;
	void aendereStatus(Bestellstatus bestellstatus);
	void annehmen();
	active void allesZuruecksenden##allZrck();
	Integer berechneWarenwert();
	void lieferungHinzufuegen(KndLieferung lieferung);
	
}
class Vorbestellung extends BestellungAbstrakt{
	public Position ** positionsListe;
	void stornieren();
}

class KndLieferung extends ZeitObjekt{
	prior public Bestellung bestellung;
	public Integer lieferversuche;
	event void erneutSenden();
}

class HstLieferung extends ZeitObjekt{
	prior Artikel artikel;
	prior Integer menge;
}

class KndAnnahme extends ZeitObjekt{
	prior KndLieferung kndLieferung;
}

class RetoureLieferung extends ZeitObjekt{
	prior KndLieferung kndLieferung;
}

class RetourePosition extends ZeitObjekt{
	prior PositionInBestellung position;
}

abstract class PositionAbstrakt {
	public no-view prior Artikel artikel;
	public prior Integer menge;
}
class Position extends PositionAbstrakt{
	void verringereMenge(Integer menge) throws ExcLagerbestandUnderZero;
	void aendereMenge(Integer menge) throws ExcLagerbestandUnderZero, ExcLagerbestandOverMax;
	void erhoeheMenge(Integer menge) throws ExcLagerbestandOverMax;
	void entfernePosition(EinkaufsManager einkaufsManager);
}

class PositionInBestellung##posInBest extends PositionAbstrakt{
	public prior server-only Bestellung bestellung;
	active void zuruecksenden();
}

class Lieferart{
	indexed prior String name;
	public prior Integer lieferzeit;
	public prior Integer preis;
	void aendereLieferartPreis(Integer preis);
	active void aendereLieferartName(String name) throws ExcAlreadyExists;
	void aendereLieferartDauer(Integer dauer);
}

//Ein Status für die Zeitobjekte, um sie nach Ablauf der Zeit zu deaktivieren
abstract class Status {}
singleton activated extends Status{}
singleton deactivated extends Status{}

//Der Artikelstatus bestimmt, ob ein Artikel verkauft oder nachbestellt wird 
abstract class Artikelstatus{}
singleton Neuanlage extends Artikelstatus{}
singleton Verkauf extends Artikelstatus{}
singleton Auslauf extends Artikelstatus{}

//Der Bestellstatus ist als Information für den Kunden gedacht
abstract class Bestellstatus{}
singleton Verarbeitung extends Bestellstatus{}
singleton Hinversand extends Bestellstatus{}
singleton Geliefert extends Bestellstatus{}
singleton Angenommen extends Bestellstatus{}
singleton Rueckversand extends Bestellstatus{}

exception ExcIllogicalDataEntry{}
exception ExcAuszahlungGroesserGutgaben{}
exception ExcWarenwertUeberKontoguthaben{}
exception ExcArtikelNochNichtVerfuegbar{}
exception ExcArtikelHatKeinenHersteller{}
exception ExcArtikelNichtVerfuegbar{}
exception ExcEinkaufslisteNichtVerfuegbar{}
exception ExcHasNoParent{}
exception ExcHasChildren{}
exception ExcInconsistentStatusChange{}
exception ExcAlreadyExists{}
exception ExcLagerbestandOverMax{}
exception ExcLagerbestandUnderZero{}
exception ExcLieferartAlreadyExists{}
exception ExcArtikelAlreadyExists{}
exception ExcUserAlreadyExists{}
exception ExcStatusDidNotChange{}
exception ExcArtikelDoesNotExist{}
}

