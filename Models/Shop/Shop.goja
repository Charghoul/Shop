model Shop {

server Server {
	Service service;
	ZeitManager zeitmanager;
}

abstract server Service {
}
abstract server ServiceShop extends Service{
	observe ProduktKatalog produktKatalog;
}
server ServiceKunde extends ServiceShop {
	observe no-view Warenlager warenlager;
	public one-to-one (no-view myServiceKunde) Konto konto;
	one-to-one (no-view myServiceKunde) EinkaufsManager einkaufsManager;
	no-view LieferartManager lieferartManager;
	observe BestellManager  bestellManager;
	void neuePosition(EinkaufsManager einkaufsManager, Artikel artikel {produktKatalog}, Integer menge) throws UserException;
	void vorbestellen(EinkaufsManager einkaufsManager, Lieferart lieferart {lieferartManager});
	void bestellen(EinkaufsManager einkaufsManager, Lieferart lieferart {lieferartManager});
	void aendereMenge(Position position, Integer menge) throws ExcLagerbestandUnderZero, ExcLagerbestandOverMax;
	void zuEinkaufswagenHinzufuegen(Artikel artikel, Integer menge);
	void zuruecksenden(PositionInBestellung position checked);
	void allesZuruecksenden(Bestellung bestellung checked);
	void annehmen(Bestellung bestellung checked);
	void entfernePosition(Position position);
	void einzahlen(Konto konto, Integer betrag);
	void auszahlen(Konto konto, Integer betrag) throws ExcAuszahlungGroesserGutgaben;
}
server ServiceAdmin extends ServiceShop {
	Warenlager warenlager;
	ArtikelManager artikelManager;
	LieferartManager lieferartManager;
	one-to-one HerstellerManager herstellerManager;
	observe ZeitManager zeitManager;
	void aendereHstLieferzeit(Artikel artikel, Integer hstLieferzeit);
	void neuerArtikel(ArtikelManager artikelManager, String artikelnummer, String bezeichnung, Integer preis, Integer minLagerbestand, 		Integer maxLagerbestand, Integer hstLieferzeit);
	void produktgruppeHinzufuegen(Produktgruppe produktgruppe, String name)  throws ExcAlreadyExists, CycleException;
	void produktgruppeEntfernen(Produktgruppe produktgruppe);
	void artikelAnhaengen( Produktgruppe produktgruppe, Artikel artikel {artikelManager})  throws ExcAlreadyExists, CycleException;
	void artikelAbhaengen(Produktgruppe produktgruppe, Artikel artikel);
	void statusVerkauf@@freigeben(Artikel artikel checked);
	void statusAuslauf@@einstellen(Artikel artikel checked);
	void neueLieferArt(LieferartManager lieferartManager, String name, Integer lieferzeit, Integer preis) throws ExcAlreadyExists;
	void aendereLieferart(Lieferart lieferart, String name, Integer lieferzeit, Integer preis) throws ExcAlreadyExists;
	void artikelEinlagern(Warenlager warenlager, Artikel artikel {artikelManager}, Integer menge);
	void artikelEntnehmen(Warenlager warenlager, Artikel artikel {artikelManager}, Integer menge);
	void artikelEntfernen(Warenlager warenlager, Position position {warenlager});
	void verringereMenge(Position position, Integer menge) throws ExcLagerbestandUnderZero;
	void aendereMenge(Position position, Integer menge) throws ExcLagerbestandUnderZero, ExcLagerbestandOverMax;
	void erhoeheMenge(Position position, Integer menge) throws ExcLagerbestandOverMax;
	void aendereArtikel(Artikel artikel, Integer preis, Integer minLagerbestand, Integer maxLagerbestand, Integer hstLieferzeit) throws ExcAlreadyExists;
	void neuerHersteller(HerstellerManager herstellerManager, String name) throws ExcAlreadyExists;
	void aendereHersteller(Hersteller hersteller, String name) throws ExcAlreadyExists;
	void herstellerHinzufuegen(Artikel artikel, Hersteller hersteller {herstellerManager});
	void aendereAnnahmezeit(ZeitManager zeitManager,Integer neueZeit);
	void aendereMaxAnlieferungsVersuche(ZeitManager zeitManager, Integer maxAnlieferungsVersuche);
	void aendereRueckversandGebuehr(LieferartManager lieferartManager,Integer percent);
}
server ServiceRegister extends Service {
	active void register(String username, String passwort) throws ExcUserAlreadyExists;
}
singleton ArtikelManager{
	Artikel ** artikelListe;
	active void neuerArtikel(String artikelnummer, String bezeichnung, Integer preis, Integer minLagerbestand, 		Integer maxLagerbestand, Integer hstLieferzeit) throws UserException;
	void herstellerHinzufuegen(Artikel artikel, Hersteller hersteller);
}

class BestellManager{
	public Bestellung ** bestellListe;
	public Vorbestellung ** vorbestellListe;
	Integer bestellID;
	server-only prior	public Konto konto;
	Bestellung neueBestellung(Position ** positionsListe, Integer warenwert, Lieferart lieferart) throws ExcArtikelNichtVerfuegbar;
	Vorbestellung neueVorbestellung(Position ** positionsListe, Integer warenwert, Lieferart lieferart);
	event void benachrichtige();
	void pruefeVorbestellungen();	
}

singleton ProduktKatalog{
	public Produktgruppe produktgruppen;
	event void produktgruppeHinzufuegen(Produktgruppe produktgruppe, String name)  throws ExcAlreadyExists, CycleException;
	event active void produktgruppeEntfernen##prodEntf(Produktgruppe produktgruppe) throws ExcHasNoParent;
	event void artikelAnhaengen( Produktgruppe produktgruppe, Artikel artikel )  throws ExcAlreadyExists, CycleException;
	event void artikelAbhaengen(Produktgruppe produktgruppe, Artikel artikel);
	event void internalUpdate();
}

singleton Warenlager{
	public Position ** warenListe;
	active void artikelEntnehmen##artEntf(Artikel artikel, Integer menge) throws ExcLagerbestandUnderZero, ExcArtikelHatKeinenHersteller;
	event active void artikelEinlagern(Artikel artikel, Integer menge) throws ExcLagerbestandOverMax;
	active void artikelEntfernen##artEntn(Position position);
	Position nichtVerfPruefen(Position ** positionsListe);
	void nachbestellen(Artikel artikel, Integer menge) throws ExcArtikelHatKeinenHersteller;
}

singleton ZeitManager {
	observe ZeitObjekt ** zeitObjektListe;
	server-only ZeitObjekt ** annahmeZeiten;
	public Integer annahmezeit;
	public Integer maxAnlieferungsVersuche##maxAnl;
	void handleTimeUnitElapsed() ;
	event void neueHstLieferung(Artikel artikel, Integer menge);
	event void neueKndLieferung(Bestellung bestellung);
	event void neueKndAnnahme(KndLieferung kndLieferung);
	event void forwardInternalEvent();
	void removeZeitObjekt(ZeitObjekt zeitObjekt);
	void aendereAnnahmezeit(Integer neueZeit);
	void aendereMaxAnlieferungsVersuche(Integer maxAnlieferungsVersuche);
}

abstract class ZeitObjekt{
	public prior Integer remainingTime;
	server-only public prior Status status;
	event void reduceTime();
	void handleTimeElapsed();
	event void zeitAbgelaufen();
}

class HerstellerManager{
	Hersteller ** herstellerListe;
	void neuerHersteller(String name) throws ExcAlreadyExists;
}
class EinkaufsManager{
	Position ** einkaufsListe;
	prior no-view BestellManager bestellManager;
	active void bestellen(Lieferart lieferart) throws ExcArtikelNichtVerfuegbar, ExcWarenwertUeberKontoguthaben;
	active void vorbestellen(Lieferart lieferart) throws ExcWarenwertUeberKontoguthaben;
	void neuePosition(Artikel artikel, Integer menge) throws ExcArtikelAlreadyExists, ExcLagerbestandOverMax, ExcArtikelNochNichtVerfuegbar;
	void entfernePosition(Position position);
	Integer gibGesamtPreis();
}
singleton LieferartManager{
	public Lieferart ** lieferartenListe;
	public prior Integer rueckversandGebuehr##rckG;
	void neueLieferart(String name, Integer lieferzeit, Integer preis) throws ExcAlreadyExists;
	void aendereLieferart(Lieferart lieferart, String name, Integer lieferzeit, Integer preis) throws ExcAlreadyExists;
	void aendereRueckversandGebuehr(Integer percent);
}

class Kunde{
	indexed prior String benutzername;
	prior String passwort;
	public Konto konto;
}

class Konto{
	public prior Integer kontostand;
	public prior Integer limit;
	public prior Integer reserviert;
	void abbuchen(Integer betrag);
	void einzahlen(Integer betrag);
	void auszahlen(Integer betrag) throws ExcAuszahlungGroesserGutgaben;
	void reserviere(Integer betrag);
	void verringereReserviert(Integer betrag);
}
hierarchy Hierarchie;
abstract class Komponente {
}
class Artikel extends Komponente{
	prior indexed String artikelnummer;
	prior indexed String bezeichnung;
	public prior Integer preis;
	public prior Integer minLagerbestand;
	public prior Integer maxLagerbestand;
	public-write prior Integer hstLieferzeit;
	public prior skip-view Artikelstatus artikelstatus;
	public no-view Hersteller hersteller;
	void aendereArtikel(Integer preis, Integer minLagerbestand, Integer maxLagerbestand, Integer hstLieferzeit) throws ExcAlreadyExists;
	active void statusVerkauf() throws ExcInconsistentStatusChange, ExcArtikelHatKeinenHersteller;
	active void statusAuslauf() throws ExcInconsistentStatusChange;
	active void zuEinkaufswHinz(Integer menge, EinkaufsManager einkaufsManager) throws UserException;
	void herstellerHinzufuegen(Hersteller hersteller);
}
class Produktgruppe extends Komponente{
	symmetric Komponente**komponentenListe hierarchy Hierarchie;
	prior indexed String name;
	void produktgruppeHinzufuegen(String name) throws ExcAlreadyExists, CycleException;
	void prodGEntfernen() throws ExcHasNoParent;
	void removeChild(Produktgruppe child);
	void artikelAnhaengen(Artikel artikel) throws ExcAlreadyExists, CycleException;
	void artikelAbhaengen(Artikel artikel);
}
class Hersteller{
	prior indexed String name;
	void aendereHersteller(String name) throws ExcAlreadyExists;
}
abstract class BestellungAbstrakt##BstAbstr{
	public prior server-only BestellManager bestellManager;
	public prior Integer warenwert;
	public prior Lieferart lieferart;
	void listeHinzufuegen(Position ** positionsListe);
}

class Bestellung extends BestellungAbstrakt{
	public PositionInBestellung ** positionsListe;
	server-only public KndLieferung kndLieferung;
	prior indexed Integer bestellID;
	public no-view Bestellstatus bestellstatus;
	void aendereStatus(Bestellstatus bestellstatus);
	void annehmen();
	active void allesZuruecksenden##allZrck();
	Integer berechneWarenwert();
	void lieferungHinzufuegen(KndLieferung lieferung);
	
}
class Vorbestellung extends BestellungAbstrakt{
	public Position ** positionsListe;
	void stornieren();
}

class KndLieferung extends ZeitObjekt{
	prior public Bestellung bestellung;
	public Integer lieferversuche;
	event void erneutSenden();
}

class HstLieferung extends ZeitObjekt{
	prior Artikel artikel;
	prior Integer menge;
}

class KndAnnahme extends ZeitObjekt{
	prior KndLieferung kndLieferung;
}

abstract class PositionAbstrakt {
	public no-view prior Artikel artikel;
	public prior Integer menge;
}
class Position extends PositionAbstrakt{
	void verringereMenge(Integer menge) throws ExcLagerbestandUnderZero;
	void aendereMenge(Integer menge) throws ExcLagerbestandUnderZero, ExcLagerbestandOverMax;
	void erhoeheMenge(Integer menge) throws ExcLagerbestandOverMax;
	void entfernePosition(EinkaufsManager einkaufsManager);
}

class PositionInBestellung##posInBest extends PositionAbstrakt{
	public prior server-only Bestellung bestellung;
	active void zuruecksenden();
}

class Lieferart{
	indexed prior String name;
	public prior Integer lieferzeit;
	public prior Integer preis;
	void aendereLieferart(Integer lieferzeit, Integer preis) throws ExcAlreadyExists;
}

abstract class Status {}
singleton activated extends Status{}
singleton deactivated extends Status{}

abstract class Artikelstatus{}
singleton Neuanlage extends Artikelstatus{}
singleton Verkauf extends Artikelstatus{}
singleton Auslauf extends Artikelstatus{}

abstract class Bestellstatus{}
singleton Verarbeitung extends Bestellstatus{}
singleton Hinversand extends Bestellstatus{}
singleton Geliefert extends Bestellstatus{}
singleton Angenommen extends Bestellstatus{}
singleton Rueckversand extends Bestellstatus{}

exception ExcIllogicalDataEntry{}
exception ExcAuszahlungGroesserGutgaben{}
exception ExcWarenwertUeberKontoguthaben{}
exception ExcArtikelNochNichtVerfuegbar{}
exception ExcArtikelHatKeinenHersteller{}
exception ExcArtikelNichtVerfuegbar{}
exception ExcEinkaufslisteNichtVerfuegbar{}
exception ExcHasNoParent{}
exception ExcHasChildren{}
exception ExcInconsistentStatusChange{}
exception ExcAlreadyExists{}
exception ExcLagerbestandOverMax{}
exception ExcLagerbestandUnderZero{}
exception ExcLieferartAlreadyExists{}
exception ExcArtikelAlreadyExists{}
exception ExcUserAlreadyExists{}
exception ExcStatusDidNotChange{}

}

